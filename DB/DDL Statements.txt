-- Tabelle: aehnlichzu
CREATE TABLE aehnlichzu (
    produkt_ida VARCHAR(255) NOT NULL,
    produkt_idb VARCHAR(255) NOT NULL,
    PRIMARY KEY (produkt_ida, produkt_idb),
    CONSTRAINT chk_produkt_ida_neq_produkt_idb CHECK (produkt_ida <> produkt_idb),
    CONSTRAINT fk_aehnlichzu_produkt_ida FOREIGN KEY (produkt_ida) REFERENCES produkt ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_aehnlichzu_produkt_idb FOREIGN KEY (produkt_idb) REFERENCES produkt ON DELETE CASCADE ON UPDATE CASCADE
);

-- Tabelle: angebot
CREATE TABLE angebot (
    angebot_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    filial_id BIGINT NOT NULL,
    produkt_id VARCHAR(255) NOT NULL,
    PRIMARY KEY (angebot_id),
    CONSTRAINT fk_angebot_filial_id FOREIGN KEY (filial_id) REFERENCES filiale ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_angebot_produkt_id FOREIGN KEY (produkt_id) REFERENCES produkt ON DELETE CASCADE ON UPDATE CASCADE
);

-- Tabelle: angebotsdetails
CREATE TABLE angebotsdetails (
    angebot_id BIGINT NOT NULL,
    zustand VARCHAR(255) NOT NULL,
    preis FLOAT(53),
    PRIMARY KEY (angebot_id, zustand),
    CONSTRAINT chk_preis_geq_zero CHECK (preis >= 0),
    CONSTRAINT fk_angebotsdetails_angebot_id FOREIGN KEY (angebot_id) REFERENCES angebot ON DELETE CASCADE ON UPDATE CASCADE
);

-- Tabelle: autoren
CREATE TABLE autoren (
    person_id BIGINT NOT NULL,
    produkt_id VARCHAR(255) NOT NULL,
    hauptautor_id BIGINT,
    PRIMARY KEY (person_id, produkt_id),
    CONSTRAINT fk_autoren_person_id FOREIGN KEY (person_id) REFERENCES person ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_autoren_produkt_id FOREIGN KEY (produkt_id) REFERENCES produkt ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_autoren_hauptautor_id FOREIGN KEY (hauptautor_id) REFERENCES person ON DELETE SET NULL ON UPDATE CASCADE
);

-- Tabelle: buch
CREATE TABLE buch (
    isbn VARCHAR(255),
    seitenanzahl INTEGER,
    verlag VARCHAR(255),
    produkt_id VARCHAR(255) NOT NULL,
    PRIMARY KEY (produkt_id),
    CONSTRAINT chk_seitenanzahl_geq_zero CHECK (seitenanzahl >= 0),
    CONSTRAINT fk_buch_produkt_id FOREIGN KEY (produkt_id) REFERENCES produkt ON DELETE CASCADE ON UPDATE CASCADE
);

-- Tabelle: dvd
CREATE TABLE dvd (
    format VARCHAR(255) NOT NULL,
    laufzeit INTEGER,
    region_code INTEGER,
    produkt_id VARCHAR(255) NOT NULL,
    PRIMARY KEY (produkt_id),
    CONSTRAINT chk_laufzeit_geq_zero CHECK (laufzeit >= 0),
    CONSTRAINT chk_region_code_geq_zero CHECK (region_code >= 0),
    CONSTRAINT fk_dvd_produkt_id FOREIGN KEY (produkt_id) REFERENCES produkt ON DELETE CASCADE ON UPDATE CASCADE
);

-- Tabelle: dvdrollen
CREATE TABLE dvdrollen (
    produkt_id VARCHAR(255) NOT NULL,
    person_id BIGINT NOT NULL,
    rolle VARCHAR(255) NOT NULL,
    PRIMARY KEY (produkt_id, person_id, rolle),
    CONSTRAINT chk_rolle_in_check CHECK (rolle IN ('Actor', 'Creator', 'Director')),
    CONSTRAINT fk_dvdrollen_produkt_id FOREIGN KEY (produkt_id) REFERENCES dvd ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_dvdrollen_person_id FOREIGN KEY (person_id) REFERENCES person ON DELETE CASCADE ON UPDATE CASCADE
);

-- Tabelle: filiale
CREATE TABLE filiale (
    filial_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    anschrift VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL,
    PRIMARY KEY (filial_id)
);

-- Tabelle: kategorie
CREATE TABLE kategorie (
    kategorie_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(255) NOT NULL,
    PRIMARY KEY (kategorie_id)
);

-- Tabelle: kategorie_hierarchie
CREATE TABLE kategorie_hierarchie (
    child_id BIGINT NOT NULL,
    parent_id BIGINT NOT NULL,
    PRIMARY KEY (child_id, parent_id),
    CONSTRAINT fk_kategorie_hierarchie_child_id FOREIGN KEY (child_id) REFERENCES kategorie ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_kategorie_hierarchie_parent_id FOREIGN KEY (parent_id) REFERENCES kategorie ON DELETE RESTRICT ON UPDATE CASCADE
);

-- Tabelle: kauf
CREATE TABLE kauf (
    kauf_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    kaufdatum TIMESTAMP(6) NOT NULL,
    kontonummer VARCHAR(255) NOT NULL,
    lieferadresse VARCHAR(255) NOT NULL,
    kunde_id BIGINT NOT NULL,
    PRIMARY KEY (kauf_id),
    CONSTRAINT fk_kauf_kunde_id FOREIGN KEY (kunde_id) REFERENCES kunde ON DELETE CASCADE ON UPDATE CASCADE
);

-- Tabelle: kaufdetails
CREATE TABLE kaufdetails (
    angebot_id BIGINT NOT NULL,
    kauf_id BIGINT NOT NULL,
    zustand VARCHAR(255) NOT NULL,
    menge INTEGER NOT NULL,
    preis FLOAT(53) NOT NULL,
    PRIMARY KEY (angebot_id, kauf_id, zustand),
    CONSTRAINT chk_menge_geq_zero CHECK (menge >= 0),
    CONSTRAINT chk_preis_geq_zero CHECK (preis >= 0),
    CONSTRAINT fk_kaufdetails_angebot_id FOREIGN KEY (angebot_id) REFERENCES angebot ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_kaufdetails_kauf_id FOREIGN KEY (kauf_id) REFERENCES kauf ON DELETE CASCADE ON UPDATE CASCADE
);

-- Tabelle: kuenstler
CREATE TABLE kuenstler (
    produkt_id VARCHAR(255) NOT NULL,
    person_id BIGINT NOT NULL,
    PRIMARY KEY (produkt_id, person_id),
    CONSTRAINT fk_kuenstler_produkt_id FOREIGN KEY (produkt_id) REFERENCES musikcd ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_kuenstler_person_id FOREIGN KEY (person_id) REFERENCES person ON DELETE CASCADE ON UPDATE CASCADE
);

-- Tabelle: kunde
CREATE TABLE kunde (
    kunde_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(255) NOT NULL,
    PRIMARY KEY (kunde_id)
);

-- Tabelle: labelliste
CREATE TABLE labelliste (
    label_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    label VARCHAR(255) NOT NULL,
    produkt_id VARCHAR(255) NOT NULL,
    PRIMARY KEY (label_id),
    CONSTRAINT fk_labelliste_produkt_id FOREIGN KEY (produkt_id) REFERENCES musikcd ON DELETE CASCADE ON UPDATE CASCADE
);

-- Tabelle: musikcd
CREATE TABLE musikcd (
    anzahlcds BIGINT NOT NULL,
    produkt_id VARCHAR(255) NOT NULL,
    PRIMARY KEY (produkt_id),
    CONSTRAINT fk_musikcd_produkt_id FOREIGN KEY (produkt_id) REFERENCES produkt ON DELETE CASCADE ON UPDATE CASCADE
);

-- Tabelle: person
CREATE TABLE person (
    person_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(255) NOT NULL,
    PRIMARY KEY (person_id)
);

-- Tabelle: produkt
CREATE TABLE produkt (
    produkt_id VARCHAR(255) NOT NULL,
    bild VARCHAR(1023),
    rating FLOAT(53),
    titel VARCHAR(255) NOT NULL,
    verkaufsrang INTEGER,
    erscheinungsdatum DATE,
    PRIMARY KEY (produkt_id),
    CONSTRAINT chk_verkaufsrang_geq_zero CHECK (verkaufsrang >= 0),
    CONSTRAINT chk_rating_geq_zero CHECK (rating >= 0)
);

-- Tabelle: produktkategorie
CREATE TABLE produktkategorie (
    produkt_id VARCHAR(255) NOT NULL,
    kategorie_id BIGINT NOT NULL,
    PRIMARY KEY (produkt_id, kategorie_id),
    CONSTRAINT fk_produktkategorie_produkt_id FOREIGN KEY (produkt_id) REFERENCES produkt ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_produktkategorie_kategorie_id FOREIGN KEY (kategorie_id) REFERENCES kategorie ON DELETE CASCADE ON UPDATE CASCADE
);

-- Tabelle: rezension
CREATE TABLE rezension (
    rezension_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    anzahl_nuetzlich INTEGER,
    datum DATE NOT NULL,
    punkte INTEGER NOT NULL,
    text TEXT,
    username VARCHAR(255) NOT NULL,
    zusammenfassung VARCHAR(255),
    kunde_id BIGINT,
    produkt_id VARCHAR(255) NOT NULL,
    PRIMARY KEY (rezension_id),
    CONSTRAINT chk_punkte_range CHECK (punkte BETWEEN 1 AND 5),
    CONSTRAINT chk_anzahl_nuetzlich_geq_zero CHECK (anzahl_nuetzlich >= 0),
    CONSTRAINT fk_rezension_kunde_id FOREIGN KEY (kunde_id) REFERENCES kunde ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT fk_rezension_produkt_id FOREIGN KEY (produkt_id) REFERENCES produkt ON DELETE CASCADE ON UPDATE CASCADE
);

-- Tabelle: trackliste
CREATE TABLE trackliste (
    track_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    titel VARCHAR(255) NOT NULL,
    produkt_id VARCHAR(255) NOT NULL,
    PRIMARY KEY (track_id),
    CONSTRAINT fk_trackliste_produkt_id FOREIGN KEY (produkt_id) REFERENCES musikcd ON DELETE CASCADE ON UPDATE CASCADE
);

-- Indizes
CREATE INDEX idx_angebotdetails_zustand ON angebotsdetails (zustand);
CREATE INDEX idx_dvdrollen_rolle ON dvdrollen (rolle);
CREATE INDEX idx_produkt_verkaufsrang ON produkt (verkaufsrang);
CREATE INDEX idx_produkt_rating ON produkt (rating);
CREATE INDEX idx_rezension_punkte ON rezension (punkte);
CREATE INDEX idx_rezension_datum ON rezension (datum);
CREATE INDEX idx_rezension_username ON rezension (username);
CREATE INDEX idx_trackliste_titel ON trackliste (titel);
CREATE INDEX idx_aehnlichzu_ba ON aehnlichzu (produkt_idb, produkt_ida);
CREATE INDEX idx_filiale_name ON filiale (name);
CREATE INDEX idx_filiale_anschrift ON filiale (anschrift);
CREATE INDEX idx_kuenstler_person_id ON kuenstler (person_id);
CREATE INDEX idx_buch_isbn ON buch (isbn);
